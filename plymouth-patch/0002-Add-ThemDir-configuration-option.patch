From c88881bc48a0e8ec8ec71757edb4343259506714 Mon Sep 17 00:00:00 2001
From: snapcraft <snapcraft@canonical.com>
Date: Mon, 27 Sep 2021 15:20:30 +0200
Subject: [PATCH 2/2] Add ThemDir configuration option

Add a new option called ThemeDir to the configuration file, so a
configurable path can be used to ship themes.

Upstream MP: https://gitlab.freedesktop.org/plymouth/plymouth/-/merge_requests/142
---
 src/libply/ply-utils.h |  2 ++
 src/main.c             | 71 +++++++++++++++++++++++++++---------------
 2 files changed, 48 insertions(+), 25 deletions(-)

diff --git a/src/libply/ply-utils.h b/src/libply/ply-utils.h
index d7b7622..47bb3f2 100644
--- a/src/libply/ply-utils.h
+++ b/src/libply/ply-utils.h
@@ -39,6 +39,8 @@
 #define CLAMP(a, b, c) (MIN (MAX ((a), (b)), (c)))
 #endif
 
+#define PLY_NUMBER_OF_ELEMENTS(arr) (sizeof (arr) / sizeof ((arr)[0]))
+
 #define PLY_UTF8_CHARACTER_SIZE_MAX 4
 
 typedef intptr_t ply_module_handle_t;
diff --git a/src/main.c b/src/main.c
index e018b7f..8fb082b 100644
--- a/src/main.c
+++ b/src/main.c
@@ -276,6 +276,35 @@ show_messages (state_t *state)
         }
 }
 
+static bool
+get_theme_path (const char  *splash_string,
+                const char  *configured_theme_dir,
+                char       **theme_path)
+{
+        const char *paths[] = { PLYMOUTH_RUNTIME_THEME_PATH,
+                                configured_theme_dir,
+                                PLYMOUTH_THEME_PATH };
+        size_t i;
+
+        for (i = 0; i < PLY_NUMBER_OF_ELEMENTS (paths); ++i) {
+                if (paths[i] == NULL)
+                        continue;
+
+                asprintf (theme_path,
+                          "%s/%s/%s.plymouth",
+                          paths[i], splash_string, splash_string);
+                if (ply_file_exists (*theme_path)) {
+                        ply_trace ("Theme is %s", *theme_path);
+                        return true;
+                }
+                ply_trace ("Theme %s not found", *theme_path);
+                free (*theme_path);
+                *theme_path = NULL;
+        }
+
+        return false;
+}
+
 static bool
 load_settings (state_t    *state,
                const char *path,
@@ -297,16 +326,12 @@ load_settings (state_t    *state,
         if (splash_string == NULL)
                 goto out;
 
-        asprintf (theme_path,
-                  PLYMOUTH_RUNTIME_THEME_PATH "%s/%s.plymouth",
-                  splash_string, splash_string);
-        ply_trace ("Checking if %s exists", *theme_path);
-        if (!ply_file_exists (*theme_path)) {
-                ply_trace ("%s not found, fallbacking to " PLYMOUTH_THEME_PATH,
-                           *theme_path);
-                asprintf (theme_path,
-                          PLYMOUTH_THEME_PATH "%s/%s.plymouth",
-                          splash_string, splash_string);
+        {
+                char *configured_theme_dir;
+                configured_theme_dir = ply_key_file_get_value (key_file, "Daemon",
+                                                                         "ThemeDir");
+                get_theme_path (splash_string, configured_theme_dir, theme_path);
+                free (configured_theme_dir);
         }
 
         if (isnan (state->splash_delay)) {
@@ -385,19 +410,9 @@ find_override_splash (state_t *state)
 
         if (splash_string != NULL) {
                 ply_trace ("Splash is configured to be '%s'", splash_string);
-                asprintf (&state->override_splash_path,
-                          PLYMOUTH_RUNTIME_THEME_PATH "%s/%s.plymouth",
-                          splash_string, splash_string);
-
-                ply_trace ("Checking if %s exists", state->override_splash_path);
-                if (!ply_file_exists (state->override_splash_path)) {
-                        ply_trace ("%s not found, fallbacking to " PLYMOUTH_THEME_PATH,
-                                   state->override_splash_path);
-                        free (state->override_splash_path);
-                        asprintf (&state->override_splash_path,
-                                  PLYMOUTH_THEME_PATH "%s/%s.plymouth",
-                                  splash_string, splash_string);
-                }
+
+                get_theme_path (splash_string, NULL, &state->override_splash_path);
+
                 free (splash_string);
         }
 
@@ -433,7 +448,8 @@ find_system_default_splash (state_t *state)
                 return;
         }
 
-        ply_trace ("System configured theme file is '%s'", state->system_default_splash_path);
+        if (state->system_default_splash_path != NULL)
+                ply_trace ("System configured theme file is '%s'", state->system_default_splash_path);
 }
 
 static void
@@ -450,7 +466,8 @@ find_distribution_default_splash (state_t *state)
                 }
         }
 
-        ply_trace ("Distribution default theme file is '%s'", state->distribution_default_splash_path);
+        if (state->distribution_default_splash_path != NULL)
+                ply_trace ("Distribution default theme file is '%s'", state->distribution_default_splash_path);
 }
 
 static void
@@ -2321,6 +2338,10 @@ main (int    argc,
 
         ply_free_error_log ();
 
+        free (state.override_splash_path);
+        free (state.system_default_splash_path);
+        free (state.distribution_default_splash_path);
+
         return exit_code;
 }
 /* vim: set ts=4 ts=4 sw=4 expandtab autoindent cindent cino={.5s,(0: */
-- 
2.25.1

